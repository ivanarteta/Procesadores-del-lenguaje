%nonassoc : Declara error de la sintaxis encontrar el mismo operador dos veces en una "fila". No es lo mismo que
            no tener asociatividad. CUIDADO!

Ejemplo de precedencias:
%left '<' '>' '=' '<=' '<>' '>='
%left '+' '-'
%left '*' '/'
%left UMINUS
Hay que tener cuidado con el - negativo del principio que no es le mismo que el de la resta. 
Por lo que en estos casos en la expresión que lleva el - negativo del principio se pone '-' exp %prec UMINUS.
%prec lo que hace es declara la precedencia de una regla en particular especificando un simbolo terminal cuya precedencia debe 
utilizarse para esa regla.


Conflictos shift/reduce:
Bison está diseñado para resolver estos conflictos haciendo un shift.
Da porque la gramática es ambigüa. Por ejemplo:

    %token IF THEN ELSE variable
    %%
    stmt: expr | if_stmt 
    if_stmt: IF expr THEN stmt | IF expr THEN stmt ELSE stmt 
    expr:   variable

Conflictos reduce/reduce:
Se produce un conflicto de este tipo si hay dos o mas reglas que pueden aplicarse a la misma secuencia de entrada. 
El error posiblemente sea una ambigüedad.
Ejemplo:
    secuencia: /* vacío */
            | secuencia palabras
            | secuencia redirecciones
            ;

    palabras: /* vacío */
            | palabras palabra
            ;

    redirecciones: /* vacío */
                | redirecciones redireccion
                ;

Solución posible: Prevenir de que palabras y redirección sean vacío
    secuencia: /* vacío */
         | secuencia palabras
         | secuencia redirecciones
         ;

palabras: palabra
        | palabras palabra
        ;

redirecciones: redireccion
          | redirecciones redireccion
          ;


CAMBIOS PROPUESTOS EN DISCORD 11/11:

- cambiamos expresion_t por expresion | TK_LITERAL_CARACter porque expresion ya coge los aritmeticos

- Lista_definiciones_const -> mirar lo de TK_IGUAL y TK_ASIGNACION y tambien poner TK_LITERAL_BOOLEANO o TK_VERDADERO TK_FALSO
