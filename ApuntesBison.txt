%nonassoc : Declara error de la sintaxis encontrar el mismo operador dos veces en una "fila". No es lo mismo que
            no tener asociatividad. CUIDADO!

Ejemplo de precedencias:
%left '<' '>' '=' '<=' '<>' '>='
%left '+' '-'
%left '*' '/'
%left UMINUS
Hay que tener cuidado con el - negativo del principio que no es le mismo que el de la resta. 
Por lo que en estos casos en la expresión que lleva el - negativo del principio se pone '-' exp %prec UMINUS.
%prec lo que hace es declara la precedencia de una regla en particular especificando un simbolo terminal cuya precedencia debe 
utilizarse para esa regla.


Conflictos shift/reduce:
Bison está diseñado para resolver estos conflictos haciendo un shift.
Da porque la gramática es ambigüa. Por ejemplo:

    %token IF THEN ELSE variable
    %%
    stmt: expr | if_stmt 
    if_stmt: IF expr THEN stmt | IF expr THEN stmt ELSE stmt 
    expr:   variable

Conflictos reduce/reduce:
Se produce un conflicto de este tipo si hay dos o mas reglas que pueden aplicarse a la misma secuencia de entrada. 
El error posiblemente sea una ambigüedad.
Ejemplo:
    secuencia: /* vacío */
            | secuencia palabras
            | secuencia redirecciones
            ;

    palabras: /* vacío */
            | palabras palabra
            ;

    redirecciones: /* vacío */
                | redirecciones redireccion
                ;

Solución posible: Prevenir de que palabras y redirección sean vacío
    secuencia: /* vacío */
         | secuencia palabras
         | secuencia redirecciones
         ;

palabras: palabra
        | palabras palabra
        ;

redirecciones: redireccion
          | redirecciones redireccion
          ;


CAMBIOS PROPUESTOS EN DISCORD 11/11:

- cambiamos expresion_t por expresion | TK_LITERAL_CARACter porque expresion ya coge los aritmeticos

- Lista_definiciones_const -> mirar lo de TK_IGUAL y TK_ASIGNACION y tambien poner TK_LITERAL_BOOLEANO o TK_VERDADERO TK_FALSO

-¿Declarar tokens independientes para cada operador relacional y ver hasta que punto puede crear conflicto declarar una regla op_relacional: TK_IGUAL | TK_MAYOR |.......|vacio 
y poder usar el TK_IGUAL independiente en lista_def_const.?

-Cambios en expresion_booleana añadiendo el TK_IGUAL para tener todos los operadores relacionales

-Cambiamos las reglas poniendo TK_IGUAL donde poniamos TK_ASIGNACION

-CAmbio en Lista_definiciones_const añadiendo TK_VERDADERO y TK_FALSO

PROBLEMAS A SOLUCIONAR:
- Tenemos el siguiente ejemplo:
        ent a,b:entero;
        Esto se añade en la tabla de símbolos de la siguiente forma: b a y luego a los 2 se les da el mismo tipo
        si tenemos:
        var aux:entero; x:booleano; fvar
        Se añade a la tabla de símbolos aux y despues var. Pero a la hora de leer el tipo, primero se lee
        booleano y luego entero. Por lo que hay que conseguir de alguna forma que se inserten en la tabla de 
        simbolos los respectivos tipos correctamente

Esto no se si será mejor hacerlo con una estructura ordenada o no porque se leen en desorden a como estan en 
la tabla de simbolos. No se si añadiendoles un id o el nombre se añadirian bien